version: '3.8'

# Note: This is a production-ready configuration example.
# Adjust according to your deployment environment.

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: mcp-postgres
    restart: always
    environment:
      POSTGRES_DB: code_analysis
      POSTGRES_USER: codeanalyzer
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries=vector"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U codeanalyzer -d code_analysis"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mcp-server:
    image: ghcr.io/johannhartmann/mcp-code-analysis-server:latest
    container_name: mcp-server
    restart: always
    ports:
      - "8080:8080"
    environment:
      # Database
      DATABASE_URL: postgresql://codeanalyzer:${POSTGRES_PASSWORD}@postgres:5432/code_analysis
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Server
      MCP_HOST: 0.0.0.0
      MCP_PORT: 8080
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: json
      
      # Security
      API_KEY: ${API_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-*}
      
      # Performance
      MAX_WORKERS: ${MAX_WORKERS:-4}
      BATCH_SIZE: ${BATCH_SIZE:-100}
      EMBEDDING_CACHE_SIZE: ${EMBEDDING_CACHE_SIZE:-10000}
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - logs:/app/logs
      - embeddings_cache:/app/.embeddings_cache
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mcp-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - mcp-server
    networks:
      - mcp-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - mcp-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    restart: always
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: 'false'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - mcp-network
    profiles:
      - monitoring

  backup:
    image: postgres:16-alpine
    container_name: mcp-backup
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./docker/backup.sh:/backup.sh:ro
    entrypoint: ["/bin/sh", "/backup.sh"]
    depends_on:
      - postgres
    networks:
      - mcp-network
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  logs:
    driver: local
  embeddings_cache:
    driver: local
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16