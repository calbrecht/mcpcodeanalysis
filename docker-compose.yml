version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: mcp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: code_analysis
      POSTGRES_USER: codeanalyzer
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-developmentpass}
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries=vector"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U codeanalyzer -d code_analysis"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-server
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Database
      DATABASE_URL: postgresql://codeanalyzer:${POSTGRES_PASSWORD:-developmentpass}@postgres:5432/code_analysis
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: code_analysis
      POSTGRES_USER: codeanalyzer
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-developmentpass}
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Server
      MCP_HOST: 0.0.0.0
      MCP_PORT: 8080
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Development
      DEBUG: ${DEBUG:-false}
      RELOAD: ${RELOAD:-false}
    volumes:
      - ./src:/app/src:ro
      - ./config.yaml:/app/config.yaml:ro
      - ./code_to_analyze:/workspace:ro
      - logs:/app/logs
      - embeddings_cache:/app/.embeddings_cache
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mcp-network
    command: server

  scanner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-scanner
    restart: "no"
    environment:
      DATABASE_URL: postgresql://codeanalyzer:${POSTGRES_PASSWORD:-developmentpass}@postgres:5432/code_analysis
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./src:/app/src:ro
      - ./config.yaml:/app/config.yaml:ro
      - ./code_to_analyze:/workspace:ro
      - logs:/app/logs
      - embeddings_cache:/app/.embeddings_cache
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mcp-network
    command: scanner
    profiles:
      - tools

  indexer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-indexer
    restart: "no"
    environment:
      DATABASE_URL: postgresql://codeanalyzer:${POSTGRES_PASSWORD:-developmentpass}@postgres:5432/code_analysis
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./src:/app/src:ro
      - ./config.yaml:/app/config.yaml:ro
      - ./code_to_analyze:/workspace:ro
      - logs:/app/logs
      - embeddings_cache:/app/.embeddings_cache
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mcp-network
    command: indexer
    profiles:
      - tools

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mcp-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - mcp-network
    profiles:
      - dev

  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network
    profiles:
      - cache

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  logs:
    driver: local
  embeddings_cache:
    driver: local

networks:
  mcp-network:
    driver: bridge